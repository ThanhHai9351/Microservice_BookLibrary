upstream books_service {
    server books:5001;
}

upstream customers_service {
    server customers:5002;
}

upstream orders_service {
    server orders:5003;
}

server {
    listen 80;
    server_name localhost;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=one:10m rate=10r/s;

    # CORS headers
    add_header 'Access-Control-Allow-Origin' '*' always;
    add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
    add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
    add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;

    # Health check endpoint
    location /health {
        access_log off;
        return 200 '{"status":"OK","timestamp":"$time_iso8601"}';
    }

    # Books service
    location /api/books/ {
        limit_req zone=one burst=20 nodelay;
        
        # JWT validation
        auth_request /auth;
        
        proxy_pass http://books_service/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Customers service
    location /api/customers/ {
        limit_req zone=one burst=20 nodelay;
        
        # JWT validation
        auth_request /auth;
        
        proxy_pass http://customers_service/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Orders service
    location /api/orders/ {
        limit_req zone=one burst=20 nodelay;
        
        # JWT validation
        auth_request /auth;
        
        proxy_pass http://orders_service/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # JWT validation endpoint
    location = /auth {
        internal;
        proxy_pass http://auth_service:5004/validate;
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
        proxy_set_header X-Original-URI $request_uri;
    }

    # Error handling
    error_page 401 /401.json;
    location = /401.json {
        return 401 '{"error":"Unauthorized","message":"Invalid or missing token"}';
    }

    error_page 403 /403.json;
    location = /403.json {
        return 403 '{"error":"Forbidden","message":"Access denied"}';
    }

    error_page 429 /429.json;
    location = /429.json {
        return 429 '{"error":"Too Many Requests","message":"Rate limit exceeded"}';
    }

    error_page 500 /500.json;
    location = /500.json {
        return 500 '{"error":"Internal Server Error","message":"Something went wrong"}';
    }
} 